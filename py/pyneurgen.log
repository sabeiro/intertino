2017-05-05 12:24:40,844 started run
2017-05-05 12:25:02,063 Finished generation: 0 Max generations: 50
2017-05-05 12:25:02,063 best_value: 0.631118234371 median: 2.0 mean: 1.93155591172
2017-05-05 12:25:02,063 import math
import random
from pyneurgen.neuralnet import NeuralNet
from pyneurgen.nodes import Node, BiasNode, CopyNode, Connection
from pyneurgen.layers import Layer
from pyneurgen.recurrent import JordanRecurrent
net = NeuralNet()
hidden_nodes = max(int(round(0.9 * float(40))), 1)
net.init_layers(len(self.all_inputs[0]),
                [hidden_nodes],
                len(self.all_targets[0]))
net.layers[1].set_activation_type('sigmoid')
net.output_layer.set_activation_type('tanh')
#   Use the genotype to get starting weights
for layer in net.layers[1:]:
    for node in layer.nodes:
        for conn in node.input_connections:
            #   every time it is asked, another starting weight is given
            conn.set_weight(self.runtime_resolve('<starting_weight>', 'float'))
# Note the injection of data from the genotype
# In a real project, the genotype might pull the data from elsewhere.
net.set_all_inputs(self.all_inputs)
net.set_all_targets(self.all_targets)
length = len(self.all_inputs)
learn_end_point = int(length * .6)
validation_end_point = int(length * .8)
net.set_learn_range(0, learn_end_point)
net.set_validation_range(0, learn_end_point)
net.set_validation_range(learn_end_point + 1, validation_end_point)
net.set_test_range(validation_end_point + 1, length - 1)
net.set_learnrate(0.1)
epochs = int(round(0.0 * float(1000)))
if epochs > 0:
    #   Use learning to further set the weights
    net.learn(epochs=epochs, show_epoch_results=True,
        random_testing=False)
#   Use validation for generating the fitness value
mse = net.validate(show_sample_interval=0)
print "mse", mse
modelname = self.runtime_resolve('<model_name>', 'str')
net.save(modelname)
self.set_bnf_variable('<saved_name>', modelname)
#   This method can be used to look at all the particulars
#       of what happened...uses disk space
self.net = net
fitness = mse
self.set_bnf_variable('<fitness>', fitness)

2017-05-05 12:25:06,277 Finished generation: 1 Max generations: 50
2017-05-05 12:25:06,277 best_value: 0.631118234371 median: 2.0 mean: 1.76090161785
2017-05-05 12:25:06,277 import math
import random
from pyneurgen.neuralnet import NeuralNet
from pyneurgen.nodes import Node, BiasNode, CopyNode, Connection
from pyneurgen.layers import Layer
from pyneurgen.recurrent import JordanRecurrent
net = NeuralNet()
hidden_nodes = max(int(round(0.9 * float(40))), 1)
net.init_layers(len(self.all_inputs[0]),
                [hidden_nodes],
                len(self.all_targets[0]))
net.layers[1].set_activation_type('sigmoid')
net.output_layer.set_activation_type('tanh')
#   Use the genotype to get starting weights
for layer in net.layers[1:]:
    for node in layer.nodes:
        for conn in node.input_connections:
            #   every time it is asked, another starting weight is given
            conn.set_weight(self.runtime_resolve('<starting_weight>', 'float'))
# Note the injection of data from the genotype
# In a real project, the genotype might pull the data from elsewhere.
net.set_all_inputs(self.all_inputs)
net.set_all_targets(self.all_targets)
length = len(self.all_inputs)
learn_end_point = int(length * .6)
validation_end_point = int(length * .8)
net.set_learn_range(0, learn_end_point)
net.set_validation_range(0, learn_end_point)
net.set_validation_range(learn_end_point + 1, validation_end_point)
net.set_test_range(validation_end_point + 1, length - 1)
net.set_learnrate(0.1)
epochs = int(round(0.0 * float(1000)))
if epochs > 0:
    #   Use learning to further set the weights
    net.learn(epochs=epochs, show_epoch_results=True,
        random_testing=False)
#   Use validation for generating the fitness value
mse = net.validate(show_sample_interval=0)
print "mse", mse
modelname = self.runtime_resolve('<model_name>', 'str')
net.save(modelname)
self.set_bnf_variable('<saved_name>', modelname)
#   This method can be used to look at all the particulars
#       of what happened...uses disk space
self.net = net
fitness = mse
self.set_bnf_variable('<fitness>', fitness)

2017-05-05 12:25:22,530 Finished generation: 2 Max generations: 50
2017-05-05 12:25:22,530 best_value: 0.304542337102 median: 2.0 mean: 1.67612873471
2017-05-05 12:25:22,530 import math
import random
from pyneurgen.neuralnet import NeuralNet
from pyneurgen.nodes import Node, BiasNode, CopyNode, Connection
from pyneurgen.layers import Layer
from pyneurgen.recurrent import JordanRecurrent
net = NeuralNet()
hidden_nodes = max(int(round(0.9 * float(40))), 1)
net.init_layers(len(self.all_inputs[0]),
                [hidden_nodes],
                len(self.all_targets[0]))
net.layers[1].set_activation_type('sigmoid')
net.output_layer.set_activation_type('sigmoid')
#   Use the genotype to get starting weights
for layer in net.layers[1:]:
    for node in layer.nodes:
        for conn in node.input_connections:
            #   every time it is asked, another starting weight is given
            conn.set_weight(self.runtime_resolve('<starting_weight>', 'float'))
# Note the injection of data from the genotype
# In a real project, the genotype might pull the data from elsewhere.
net.set_all_inputs(self.all_inputs)
net.set_all_targets(self.all_targets)
length = len(self.all_inputs)
learn_end_point = int(length * .6)
validation_end_point = int(length * .8)
net.set_learn_range(0, learn_end_point)
net.set_validation_range(0, learn_end_point)
net.set_validation_range(learn_end_point + 1, validation_end_point)
net.set_test_range(validation_end_point + 1, length - 1)
net.set_learnrate(0.3)
epochs = int(round(0.0 * float(1000)))
if epochs > 0:
    #   Use learning to further set the weights
    net.learn(epochs=epochs, show_epoch_results=True,
        random_testing=False)
#   Use validation for generating the fitness value
mse = net.validate(show_sample_interval=0)
print "mse", mse
modelname = self.runtime_resolve('<model_name>', 'str')
net.save(modelname)
self.set_bnf_variable('<saved_name>', modelname)
#   This method can be used to look at all the particulars
#       of what happened...uses disk space
self.net = net
fitness = mse
self.set_bnf_variable('<fitness>', fitness)

2017-05-05 12:25:27,034 Finished generation: 3 Max generations: 50
2017-05-05 12:25:27,035 best_value: 0.304542337102 median: 2.0 mean: 1.59135592745
2017-05-05 12:25:27,036 import math
import random
from pyneurgen.neuralnet import NeuralNet
from pyneurgen.nodes import Node, BiasNode, CopyNode, Connection
from pyneurgen.layers import Layer
from pyneurgen.recurrent import JordanRecurrent
net = NeuralNet()
hidden_nodes = max(int(round(0.9 * float(40))), 1)
net.init_layers(len(self.all_inputs[0]),
                [hidden_nodes],
                len(self.all_targets[0]))
net.layers[1].set_activation_type('sigmoid')
net.output_layer.set_activation_type('sigmoid')
#   Use the genotype to get starting weights
for layer in net.layers[1:]:
    for node in layer.nodes:
        for conn in node.input_connections:
            #   every time it is asked, another starting weight is given
            conn.set_weight(self.runtime_resolve('<starting_weight>', 'float'))
# Note the injection of data from the genotype
# In a real project, the genotype might pull the data from elsewhere.
net.set_all_inputs(self.all_inputs)
net.set_all_targets(self.all_targets)
length = len(self.all_inputs)
learn_end_point = int(length * .6)
validation_end_point = int(length * .8)
net.set_learn_range(0, learn_end_point)
net.set_validation_range(0, learn_end_point)
net.set_validation_range(learn_end_point + 1, validation_end_point)
net.set_test_range(validation_end_point + 1, length - 1)
net.set_learnrate(0.3)
epochs = int(round(0.0 * float(1000)))
if epochs > 0:
    #   Use learning to further set the weights
    net.learn(epochs=epochs, show_epoch_results=True,
        random_testing=False)
#   Use validation for generating the fitness value
mse = net.validate(show_sample_interval=0)
print "mse", mse
modelname = self.runtime_resolve('<model_name>', 'str')
net.save(modelname)
self.set_bnf_variable('<saved_name>', modelname)
#   This method can be used to look at all the particulars
#       of what happened...uses disk space
self.net = net
fitness = mse
self.set_bnf_variable('<fitness>', fitness)

2017-05-05 12:25:48,683 Finished generation: 4 Max generations: 50
2017-05-05 12:25:48,683 best_value: 0.304542337102 median: 2.0 mean: 1.35429022561
2017-05-05 12:25:48,683 import math
import random
from pyneurgen.neuralnet import NeuralNet
from pyneurgen.nodes import Node, BiasNode, CopyNode, Connection
from pyneurgen.layers import Layer
from pyneurgen.recurrent import JordanRecurrent
net = NeuralNet()
hidden_nodes = max(int(round(0.9 * float(40))), 1)
net.init_layers(len(self.all_inputs[0]),
                [hidden_nodes],
                len(self.all_targets[0]))
net.layers[1].set_activation_type('sigmoid')
net.output_layer.set_activation_type('sigmoid')
#   Use the genotype to get starting weights
for layer in net.layers[1:]:
    for node in layer.nodes:
        for conn in node.input_connections:
            #   every time it is asked, another starting weight is given
            conn.set_weight(self.runtime_resolve('<starting_weight>', 'float'))
# Note the injection of data from the genotype
# In a real project, the genotype might pull the data from elsewhere.
net.set_all_inputs(self.all_inputs)
net.set_all_targets(self.all_targets)
length = len(self.all_inputs)
learn_end_point = int(length * .6)
validation_end_point = int(length * .8)
net.set_learn_range(0, learn_end_point)
net.set_validation_range(0, learn_end_point)
net.set_validation_range(learn_end_point + 1, validation_end_point)
net.set_test_range(validation_end_point + 1, length - 1)
net.set_learnrate(0.3)
epochs = int(round(0.0 * float(1000)))
if epochs > 0:
    #   Use learning to further set the weights
    net.learn(epochs=epochs, show_epoch_results=True,
        random_testing=False)
#   Use validation for generating the fitness value
mse = net.validate(show_sample_interval=0)
print "mse", mse
modelname = self.runtime_resolve('<model_name>', 'str')
net.save(modelname)
self.set_bnf_variable('<saved_name>', modelname)
#   This method can be used to look at all the particulars
#       of what happened...uses disk space
self.net = net
fitness = mse
self.set_bnf_variable('<fitness>', fitness)

2017-05-05 12:25:50,859 Finished generation: 5 Max generations: 50
2017-05-05 12:25:50,859 best_value: 0.267058419218 median: 0.947663199831 mean: 1.05968433479
2017-05-05 12:25:50,859 import math
import random
from pyneurgen.neuralnet import NeuralNet
from pyneurgen.nodes import Node, BiasNode, CopyNode, Connection
from pyneurgen.layers import Layer
from pyneurgen.recurrent import JordanRecurrent
net = NeuralNet()
hidden_nodes = max(int(round(0.9 * float(40))), 1)
net.init_layers(len(self.all_inputs[0]),
                [hidden_nodes],
                len(self.all_targets[0]))
net.layers[1].set_activation_type('sigmoid')
net.output_layer.set_activation_type('sigmoid')
#   Use the genotype to get starting weights
for layer in net.layers[1:]:
    for node in layer.nodes:
        for conn in node.input_connections:
            #   every time it is asked, another starting weight is given
            conn.set_weight(self.runtime_resolve('<starting_weight>', 'float'))
# Note the injection of data from the genotype
# In a real project, the genotype might pull the data from elsewhere.
net.set_all_inputs(self.all_inputs)
net.set_all_targets(self.all_targets)
length = len(self.all_inputs)
learn_end_point = int(length * .6)
validation_end_point = int(length * .8)
net.set_learn_range(0, learn_end_point)
net.set_validation_range(0, learn_end_point)
net.set_validation_range(learn_end_point + 1, validation_end_point)
net.set_test_range(validation_end_point + 1, length - 1)
net.set_learnrate(0.3)
epochs = int(round(0.0 * float(1000)))
if epochs > 0:
    #   Use learning to further set the weights
    net.learn(epochs=epochs, show_epoch_results=True,
        random_testing=False)
#   Use validation for generating the fitness value
mse = net.validate(show_sample_interval=0)
print "mse", mse
modelname = self.runtime_resolve('<model_name>', 'str')
net.save(modelname)
self.set_bnf_variable('<saved_name>', modelname)
#   This method can be used to look at all the particulars
#       of what happened...uses disk space
self.net = net
fitness = mse
self.set_bnf_variable('<fitness>', fitness)

2017-05-05 12:25:51,756 Finished generation: 6 Max generations: 50
2017-05-05 12:25:51,756 best_value: 0.267058419218 median: 0.588808074075 mean: 0.734806447184
2017-05-05 12:25:51,756 import math
import random
from pyneurgen.neuralnet import NeuralNet
from pyneurgen.nodes import Node, BiasNode, CopyNode, Connection
from pyneurgen.layers import Layer
from pyneurgen.recurrent import JordanRecurrent
net = NeuralNet()
hidden_nodes = max(int(round(0.9 * float(40))), 1)
net.init_layers(len(self.all_inputs[0]),
                [hidden_nodes],
                len(self.all_targets[0]))
net.layers[1].set_activation_type('sigmoid')
net.output_layer.set_activation_type('sigmoid')
#   Use the genotype to get starting weights
for layer in net.layers[1:]:
    for node in layer.nodes:
        for conn in node.input_connections:
            #   every time it is asked, another starting weight is given
            conn.set_weight(self.runtime_resolve('<starting_weight>', 'float'))
# Note the injection of data from the genotype
# In a real project, the genotype might pull the data from elsewhere.
net.set_all_inputs(self.all_inputs)
net.set_all_targets(self.all_targets)
length = len(self.all_inputs)
learn_end_point = int(length * .6)
validation_end_point = int(length * .8)
net.set_learn_range(0, learn_end_point)
net.set_validation_range(0, learn_end_point)
net.set_validation_range(learn_end_point + 1, validation_end_point)
net.set_test_range(validation_end_point + 1, length - 1)
net.set_learnrate(0.3)
epochs = int(round(0.0 * float(1000)))
if epochs > 0:
    #   Use learning to further set the weights
    net.learn(epochs=epochs, show_epoch_results=True,
        random_testing=False)
#   Use validation for generating the fitness value
mse = net.validate(show_sample_interval=0)
print "mse", mse
modelname = self.runtime_resolve('<model_name>', 'str')
net.save(modelname)
self.set_bnf_variable('<saved_name>', modelname)
#   This method can be used to look at all the particulars
#       of what happened...uses disk space
self.net = net
fitness = mse
self.set_bnf_variable('<fitness>', fitness)

2017-05-05 12:29:14,531 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:41:57,093 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:41:57,201 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:41:57,233 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:44,199 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:44,259 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:44,318 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:44,520 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:44,566 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:44,621 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:45,193 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:45,274 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:45,453 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:45,657 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:45,691 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:45,746 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:46,048 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:46,081 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:46,107 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:46,756 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:46,791 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:46,822 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:47,097 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:47,130 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:47,193 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:47,590 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:47,630 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:47,689 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:48,186 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:48,221 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:48,248 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:48,607 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:48,641 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:48,669 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:48,840 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:48,877 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:48,922 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:49,461 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:49,506 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:49,535 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:49,952 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:50,018 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:50,048 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:50,234 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:50,316 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:50,359 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:50,936 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:50,973 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:51,001 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:51,180 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:51,222 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:51,281 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:51,580 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:51,618 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:51,676 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:52,343 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:52,407 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:52,438 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:52,740 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:52,803 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:52,839 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:53,234 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:53,274 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:53,322 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:53,839 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:53,874 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:53,933 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:54,290 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:54,355 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:54,386 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:54,567 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:54,598 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:55,386 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:55,888 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:56,114 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 12:45:56,141 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:52,599 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:52,801 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:52,987 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:53,484 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:53,649 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:53,814 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:54,656 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:54,858 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:55,035 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:55,568 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:55,751 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:56,027 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:56,642 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:56,904 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:57,198 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:58,285 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:58,540 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:58,869 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:59,523 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:59,745 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:00:59,947 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:00,898 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:01,099 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:01,381 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:02,137 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:02,310 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:02,492 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:03,191 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:03,658 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:04,873 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:05,360 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:05,586 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:05,787 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:06,723 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:06,980 Starting new HTTP connection (1): analisi.ad.mediamond.it
2017-05-05 15:01:07,236 Starting new HTTP connection (1): analisi.ad.mediamond.it
